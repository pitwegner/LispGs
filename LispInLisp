Primitives:
(quote x)

(atom x)
(cond ...)
(eq x y)
(car x)
(cdr x)
(cons x y)
 - (list e1 ... en) as (cons e1 ... (cons en nil)) or primitive?
(lambda x y)
(define x y)

Can be done in Lisp:
(label (not x)
    (cond
      ((eq x t) f)
      (t t)))
      
(label (null x) (and (atom x) (eq x nil)))

(label (cadr x) (car (cdr x)))
(label (caddr x) (car (cdr (cdr x))))
(label (caddar x) (car (cdr (cdr (car x)))))
(label (cadar x) (car (cdr (car x))))

(label (append x y)
    (cond
      ((null x) y)
      (t (cons (car x) (append (cdr a) y)))))

(label (pair x y)
    (cond
      ((and (null x) (null y)) nil)
      ((and (not (atom x)) (not (atom y)))
       (cons (list (car x) (car y)) (pair (cdr x) (cdr y))))))

(label (assoc x y)
    (cond
      ((eq (caar y) x) (cadar y))
      (t (assoc x (cdr y)))))

(label (apply f args)
    (eval (cons f (appq args)) nil))

(label (appq m)
    (cond
      ((null m) nil)
      (t (cons (list 'quote (car m))
               (appq (cdr m))))))

(label (eval e a)
    (cond
      ((atom e) (assoc e a))
      ((atom (car e))
       (cond
         ((eq (car e) 'quote) (cadr e))
         ((eq (car e) 'atom) (atom (eval (cadr e) a)))
         ((eq (car e) 'eq) (eq (eval (cadr e) a) (eval (cddr e) a))
         ((eq (car e) 'cond) (evcon (cdr e) a))
         ((eq (car e) 'car) (car (eval (cadr e) a)))
         ((eq (car e) 'cdr) (cdr (eval (cadr e) a)))
         ((eq (car e) 'cons) (cons (eval (cadr e) a)
                                   (eval (caddr e) a)))
         (t (eval (cons (assoc (car e) a)
                        evlis (cdr e) a)
                  a))
         ((eq (caar e) 'label) (eval (cons (caddar e) (cdr e))
                                     (cons (list (cadar e)
                                                 (car e)
                                                 a))))
         ((eq (caar e) 'lambda)
          (eval (caddar e)
                (append (pair (cadar e)
			                  (evlis (cdr e) a))
			            a))))))))

(label (evcon c a)
    (cond
      ((eval (caar c) a) (eval (cadar c) a))
      (t (evcon (cdr c) a))))

(label (evlis m a)
    (cond
      ((null m) nil)
      (t (cons (eval (car m) a) (evlis (cdr m) a)))))
