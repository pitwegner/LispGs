entry:
1. parse as array
2. if not array -- return the elem
3. else if first elem is atom (not array and not nil) and equal to define -- define method and fill with recursively parsed rest
4. else create return node with recursively parsed rest

recursive: (local vars mitfuehren)
1. if not array -- return the elem
2. else if first elem is atom (not array and not nil) --
3.1 if define -- define local temps
3.1 if cond -- create cond send with specially parsed rest
3.2 else lookup that elem in methDict and create valueWithArguments send with parsed rest
3.3 if no function found, lookup that elem as local var and create valueWithArguments send with parsed rest
3.4 if not found, throw error that symbol is no function
4. else if first first is lambda, create block with input params and local vars and fill with recursively parsed rest (ensure for local vars)
5. else 'The author is confused - parser error'